/*!
 * jQuery Form Plugin
 * version: 4.3.0
 * Requires jQuery v1.7.2 or later
 * Project repository: https://github.com/jquery-form/form

 * Copyright 2017 Kevin Morris
 * Copyright 2006 M. Alsup

 * Dual licensed under the LGPL-2.1+ or MIT licenses
 * https://github.com/jquery-form/form#license

 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 */
!(function (r) { typeof define === 'function' && define.amd ? define(['jquery'], r) : typeof module === 'object' && module.exports ? module.exports = function (e, t) { return void 0 === t && (t = typeof window !== 'undefined' ? require('jquery') : require('jquery')(e)), r(t), t } : r(jQuery) }(function (q) { 'use strict'; const m = /\r?\n/g; const S = {}; S.fileapi = void 0 !== q('<input type="file">').get(0).files, S.formdata = void 0 !== window.FormData; const _ = !!q.fn.prop; function o (e) { const t = e.data; e.isDefaultPrevented() || (e.preventDefault(), q(e.target).closest('form').ajaxSubmit(t)) } function i (e) { let t = e.target; const r = q(t); if (!r.is('[type=submit],[type=image]')) { const a = r.closest('[type=submit]'); if (a.length === 0) return; t = a[0] } let n; const o = t.form; (o.clk = t).type === 'image' && (void 0 !== e.offsetX ? (o.clk_x = e.offsetX, o.clk_y = e.offsetY) : typeof q.fn.offset === 'function' ? (n = r.offset(), o.clk_x = e.pageX - n.left, o.clk_y = e.pageY - n.top) : (o.clk_x = e.pageX - t.offsetLeft, o.clk_y = e.pageY - t.offsetTop)), setTimeout(function () { o.clk = o.clk_x = o.clk_y = null }, 100) } function N () { let e; q.fn.ajaxSubmit.debug && (e = '[jquery.form] ' + Array.prototype.join.call(arguments, ''), window.console && window.console.log ? window.console.log(e) : window.opera && window.opera.postError && window.opera.postError(e)) }q.fn.attr2 = function () { if (!_) return this.attr.apply(this, arguments); const e = this.prop.apply(this, arguments); return e && e.jquery || typeof e === 'string' ? e : this.attr.apply(this, arguments) }, q.fn.ajaxSubmit = function (M, e, t, r) { if (!this.length) return N('ajaxSubmit: skipping submit process - no element selected'), this; let O; let a; let n; let o; const X = this; typeof M === 'function' ? M = { success: M } : typeof M === 'string' || !1 === M && arguments.length > 0 ? (M = { url: M, data: e, dataType: t }, typeof r === 'function' && (M.success = r)) : void 0 === M && (M = {}), O = M.method || M.type || this.attr2('method'), n = (n = (n = typeof (a = M.url || this.attr2('action')) === 'string' ? q.trim(a) : '') || window.location.href || '') && (n.match(/^([^#]+)/) || [])[1], o = /(MSIE|Trident)/.test(navigator.userAgent || '') && /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank', M = q.extend(!0, { url: n, success: q.ajaxSettings.success, type: O || q.ajaxSettings.type, iframeSrc: o }, M); const i = {}; if (this.trigger('form-pre-serialize', [this, M, i]), i.veto) return N('ajaxSubmit: submit vetoed via form-pre-serialize trigger'), this; if (M.beforeSerialize && !1 === M.beforeSerialize(this, M)) return N('ajaxSubmit: submit aborted via beforeSerialize callback'), this; let s = M.traditional; void 0 === s && (s = q.ajaxSettings.traditional); let u; let c; const C = []; const l = this.formToArray(M.semantic, C, M.filtering); if (M.data && (c = q.isFunction(M.data) ? M.data(l) : M.data, M.extraData = c, u = q.param(c, s)), M.beforeSubmit && !1 === M.beforeSubmit(l, this, M)) return N('ajaxSubmit: submit aborted via beforeSubmit callback'), this; if (this.trigger('form-submit-validate', [l, this, M, i]), i.veto) return N('ajaxSubmit: submit vetoed via form-submit-validate trigger'), this; let f = q.param(l, s); u && (f = f ? f + '&' + u : u), M.type.toUpperCase() === 'GET' ? (M.url += (M.url.indexOf('?') >= 0 ? '&' : '?') + f, M.data = null) : M.data = f; let d; let m; let p; const h = []; M.resetForm && h.push(function () { X.resetForm() }), M.clearForm && h.push(function () { X.clearForm(M.includeHidden) }), !M.dataType && M.target ? (d = M.success || function () {}, h.push(function (e, t, r) { const a = arguments; const n = M.replaceTarget ? 'replaceWith' : 'html'; q(M.target)[n](e).each(function () { d.apply(this, a) }) })) : M.success && (q.isArray(M.success) ? q.merge(h, M.success) : h.push(M.success)), M.success = function (e, t, r) { for (let a = M.context || this, n = 0, o = h.length; n < o; n++)h[n].apply(a, [e, t, r || X, X]) }, M.error && (m = M.error, M.error = function (e, t, r) { const a = M.context || this; m.apply(a, [e, t, r, X]) }), M.complete && (p = M.complete, M.complete = function (e, t) { const r = M.context || this; p.apply(r, [e, t, X]) }); const v = q('input[type=file]:enabled', this).filter(function () { return q(this).val() !== '' }).length > 0; const g = 'multipart/form-data'; const x = X.attr('enctype') === g || X.attr('encoding') === g; const y = S.fileapi && S.formdata; N('fileAPI :' + y); let b; const T = (v || x) && !y; !1 !== M.iframe && (M.iframe || T) ? M.closeKeepAlive ? q.get(M.closeKeepAlive, function () { b = w(l) }) : b = w(l) : b = (v || x) && y ? (function (e) { for (var r = new FormData(), t = 0; t < e.length; t++)r.append(e[t].name, e[t].value); if (M.extraData) { const a = (function (e) { let t; let r; const a = q.param(e, M.traditional).split('&'); const n = a.length; const o = []; for (t = 0; t < n; t++)a[t] = a[t].replace(/\+/g, ' '), r = a[t].split('='), o.push([decodeURIComponent(r[0]), decodeURIComponent(r[1])]); return o }(M.extraData)); for (t = 0; t < a.length; t++)a[t] && r.append(a[t][0], a[t][1]) }M.data = null; const n = q.extend(!0, {}, q.ajaxSettings, M, { contentType: !1, processData: !1, cache: !1, type: O || 'POST' }); M.uploadProgress && (n.xhr = function () { const e = q.ajaxSettings.xhr(); return e.upload && e.upload.addEventListener('progress', function (e) { let t = 0; const r = e.loaded || e.position; const a = e.total; e.lengthComputable && (t = Math.ceil(r / a * 100)), M.uploadProgress(e, r, a, t) }, !1), e }); n.data = null; const o = n.beforeSend; return n.beforeSend = function (e, t) { M.formData ? t.data = M.formData : t.data = r, o && o.call(this, e, t) }, q.ajax(n) }(l)) : q.ajax(M), X.removeData('jqxhr').data('jqxhr', b); for (let j = 0; j < C.length; j++)C[j] = null; return this.trigger('form-submit-notify', [this, M]), this; function w (e) { let t; let r; let l; let f; let o; let d; let m; let p; let a; let n; let h; let v; const i = X[0]; const g = q.Deferred(); if (g.abort = function (e) { p.abort(e) }, e) for (r = 0; r < C.length; r++)t = q(C[r]), _ ? t.prop('disabled', !1) : t.removeAttr('disabled'); (l = q.extend(!0, {}, q.ajaxSettings, M)).context = l.context || l, o = 'jqFormIO' + (new Date()).getTime(); const s = i.ownerDocument; const u = X.closest('body'); if (l.iframeTarget ? (n = (d = q(l.iframeTarget, s)).attr2('name')) ? o = n : d.attr2('name', o) : (d = q('<iframe name="' + o + '" src="' + l.iframeSrc + '" />', s)).css({ position: 'absolute', top: '-1000px', left: '-1000px' }), m = d[0], p = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders: function () {}, getResponseHeader: function () {}, setRequestHeader: function () {}, abort: function (e) { const t = e === 'timeout' ? 'timeout' : 'aborted'; N('aborting upload... ' + t), this.aborted = 1; try { m.contentWindow.document.execCommand && m.contentWindow.document.execCommand('Stop') } catch (e) {}d.attr('src', l.iframeSrc), p.error = t, l.error && l.error.call(l.context, p, t, e), f && q.event.trigger('ajaxError', [p, l, t]), l.complete && l.complete.call(l.context, p, t) } }, (f = l.global) && q.active++ == 0 && q.event.trigger('ajaxStart'), f && q.event.trigger('ajaxSend', [p, l]), l.beforeSend && !1 === l.beforeSend.call(l.context, p, l)) return l.global && q.active--, g.reject(), g; if (p.aborted) return g.reject(), g; (a = i.clk) && (n = a.name) && !a.disabled && (l.extraData = l.extraData || {}, l.extraData[n] = a.value, a.type === 'image' && (l.extraData[n + '.x'] = i.clk_x, l.extraData[n + '.y'] = i.clk_y)); const x = 1; const y = 2; function b (t) { let r = null; try { t.contentWindow && (r = t.contentWindow.document) } catch (e) { N('cannot get iframe.contentWindow document: ' + e) } if (r) return r; try { r = t.contentDocument ? t.contentDocument : t.document } catch (e) { N('cannot get iframe.contentDocument: ' + e), r = t.document } return r } const c = q('meta[name=csrf-token]').attr('content'); const T = q('meta[name=csrf-param]').attr('content'); function j () { const e = X.attr2('target'); const t = X.attr2('action'); const r = X.attr('enctype') || X.attr('encoding') || 'multipart/form-data'; i.setAttribute('target', o), O && !/post/i.test(O) || i.setAttribute('method', 'POST'), t !== l.url && i.setAttribute('action', l.url), l.skipEncodingOverride || O && !/post/i.test(O) || X.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }), l.timeout && (v = setTimeout(function () { h = !0, A(x) }, l.timeout)); const a = []; try { if (l.extraData) for (const n in l.extraData)l.extraData.hasOwnProperty(n) && (q.isPlainObject(l.extraData[n]) && l.extraData[n].hasOwnProperty('name') && l.extraData[n].hasOwnProperty('value') ? a.push(q('<input type="hidden" name="' + l.extraData[n].name + '">', s).val(l.extraData[n].value).appendTo(i)[0]) : a.push(q('<input type="hidden" name="' + n + '">', s).val(l.extraData[n]).appendTo(i)[0])); l.iframeTarget || d.appendTo(u), m.attachEvent ? m.attachEvent('onload', A) : m.addEventListener('load', A, !1), setTimeout(function e () { try { const t = b(m).readyState; N('state = ' + t), t && t.toLowerCase() === 'uninitialized' && setTimeout(e, 50) } catch (e) { N('Server abort: ', e, ' (', e.name, ')'), A(y), v && clearTimeout(v), v = void 0 } }, 15); try { i.submit() } catch (e) { document.createElement('form').submit.apply(i) } } finally { i.setAttribute('action', t), i.setAttribute('enctype', r), e ? i.setAttribute('target', e) : X.removeAttr('target'), q(a).remove() } }T && c && (l.extraData = l.extraData || {}, l.extraData[T] = c), l.forceSync ? j() : setTimeout(j, 10); let w; let S; let k; let D = 50; function A (e) { if (!p.aborted && !k) { if ((S = b(m)) || (N('cannot access response document'), e = y), e === x && p) return p.abort('timeout'), void g.reject(p, 'timeout'); if (e === y && p) return p.abort('server abort'), void g.reject(p, 'error', 'server abort'); if (S && S.location.href !== l.iframeSrc || h) { m.detachEvent ? m.detachEvent('onload', A) : m.removeEventListener('load', A, !1); let t; let r = 'success'; try { if (h) throw 'timeout'; const a = l.dataType === 'xml' || S.XMLDocument || q.isXMLDoc(S); if (N('isXml=' + a), !a && window.opera && (S.body === null || !S.body.innerHTML) && --D) return N('requeing onLoad callback, DOM not available'), void setTimeout(A, 250); const n = S.body ? S.body : S.documentElement; p.responseText = n ? n.innerHTML : null, p.responseXML = S.XMLDocument ? S.XMLDocument : S, a && (l.dataType = 'xml'), p.getResponseHeader = function (e) { return { 'content-type': l.dataType }[e.toLowerCase()] }, n && (p.status = Number(n.getAttribute('status')) || p.status, p.statusText = n.getAttribute('statusText') || p.statusText); let o; let i; let s; const u = (l.dataType || '').toLowerCase(); const c = /(json|script|text)/.test(u); c || l.textarea ? (o = S.getElementsByTagName('textarea')[0]) ? (p.responseText = o.value, p.status = Number(o.getAttribute('status')) || p.status, p.statusText = o.getAttribute('statusText') || p.statusText) : c && (i = S.getElementsByTagName('pre')[0], s = S.getElementsByTagName('body')[0], i ? p.responseText = i.textContent ? i.textContent : i.innerText : s && (p.responseText = s.textContent ? s.textContent : s.innerText)) : u === 'xml' && !p.responseXML && p.responseText && (p.responseXML = F(p.responseText)); try { w = E(p, u, l) } catch (e) { r = 'parsererror', p.error = t = e || r } } catch (e) { N('error caught: ', e), r = 'error', p.error = t = e || r }p.aborted && (N('upload aborted'), r = null), p.status && (r = p.status >= 200 && p.status < 300 || p.status === 304 ? 'success' : 'error'), r === 'success' ? (l.success && l.success.call(l.context, w, 'success', p), g.resolve(p.responseText, 'success', p), f && q.event.trigger('ajaxSuccess', [p, l])) : r && (void 0 === t && (t = p.statusText), l.error && l.error.call(l.context, p, r, t), g.reject(p, 'error', t), f && q.event.trigger('ajaxError', [p, l, t])), f && q.event.trigger('ajaxComplete', [p, l]), f && !--q.active && q.event.trigger('ajaxStop'), l.complete && l.complete.call(l.context, p, r), k = !0, l.timeout && clearTimeout(v), setTimeout(function () { l.iframeTarget ? d.attr('src', l.iframeSrc) : d.remove(), p.responseXML = null }, 100) } } } var F = q.parseXML || function (e, t) { return window.ActiveXObject ? ((t = new ActiveXObject('Microsoft.XMLDOM')).async = 'false', t.loadXML(e)) : t = (new DOMParser()).parseFromString(e, 'text/xml'), t && t.documentElement && t.documentElement.nodeName !== 'parsererror' ? t : null }; const L = q.parseJSON || function (e) { return window.eval('(' + e + ')') }; var E = function (e, t, r) { const a = e.getResponseHeader('content-type') || ''; const n = (t === 'xml' || !t) && a.indexOf('xml') >= 0; let o = n ? e.responseXML : e.responseText; return n && o.documentElement.nodeName === 'parsererror' && q.error && q.error('parsererror'), r && r.dataFilter && (o = r.dataFilter(o, t)), typeof o === 'string' && ((t === 'json' || !t) && a.indexOf('json') >= 0 ? o = L(o) : (t === 'script' || !t) && a.indexOf('javascript') >= 0 && q.globalEval(o)), o }; return g } }, q.fn.ajaxForm = function (e, t, r, a) { if ((typeof e === 'string' || !1 === e && arguments.length > 0) && (e = { url: e, data: t, dataType: r }, typeof a === 'function' && (e.success = a)), (e = e || {}).delegation = e.delegation && q.isFunction(q.fn.on), e.delegation || this.length !== 0) return e.delegation ? (q(document).off('submit.form-plugin', this.selector, o).off('click.form-plugin', this.selector, i).on('submit.form-plugin', this.selector, e, o).on('click.form-plugin', this.selector, e, i), this) : (e.beforeFormUnbind && e.beforeFormUnbind(this, e), this.ajaxFormUnbind().on('submit.form-plugin', e, o).on('click.form-plugin', e, i)); const n = { s: this.selector, c: this.context }; return !q.isReady && n.s ? (N('DOM not ready, queuing ajaxForm'), q(function () { q(n.s, n.c).ajaxForm(e) })) : N('terminating; zero elements found by selector' + (q.isReady ? '' : ' (DOM not ready)')), this }, q.fn.ajaxFormUnbind = function () { return this.off('submit.form-plugin click.form-plugin') }, q.fn.formToArray = function (e, t, r) { const a = []; if (this.length === 0) return a; let n; let o; let i; let s; let u; let c; let l; let f; let d; let m; const p = this[0]; const h = this.attr('id'); var v = (v = e || void 0 === p.elements ? p.getElementsByTagName('*') : p.elements) && q.makeArray(v); if (h && (e || /(Edge|Trident)\//.test(navigator.userAgent)) && (n = q(':input[form="' + h + '"]').get()).length && (v = (v || []).concat(n)), !v || !v.length) return a; for (q.isFunction(r) && (v = q.map(v, r)), o = 0, c = v.length; o < c; o++) if ((m = (u = v[o]).name) && !u.disabled) if (e && p.clk && u.type === 'image')p.clk === u && (a.push({ name: m, value: q(u).val(), type: u.type }), a.push({ name: m + '.x', value: p.clk_x }, { name: m + '.y', value: p.clk_y })); else if ((s = q.fieldValue(u, !0)) && s.constructor === Array) for (t && t.push(u), i = 0, l = s.length; i < l; i++)a.push({ name: m, value: s[i] }); else if (S.fileapi && u.type === 'file') { t && t.push(u); const g = u.files; if (g.length) for (i = 0; i < g.length; i++)a.push({ name: m, value: g[i], type: u.type }); else a.push({ name: m, value: '', type: u.type }) } else s != null && (t && t.push(u), a.push({ name: m, value: s, type: u.type, required: u.required })); return e || !p.clk || (m = (d = (f = q(p.clk))[0]).name) && !d.disabled && d.type === 'image' && (a.push({ name: m, value: f.val() }), a.push({ name: m + '.x', value: p.clk_x }, { name: m + '.y', value: p.clk_y })), a }, q.fn.formSerialize = function (e) { return q.param(this.formToArray(e)) }, q.fn.fieldSerialize = function (n) { const o = []; return this.each(function () { const e = this.name; if (e) { const t = q.fieldValue(this, n); if (t && t.constructor === Array) for (let r = 0, a = t.length; r < a; r++)o.push({ name: e, value: t[r] }); else t != null && o.push({ name: this.name, value: t }) } }), q.param(o) }, q.fn.fieldValue = function (e) { for (var t = [], r = 0, a = this.length; r < a; r++) { const n = this[r]; const o = q.fieldValue(n, e); o == null || o.constructor === Array && !o.length || (o.constructor === Array ? q.merge(t, o) : t.push(o)) } return t }, q.fieldValue = function (e, t) { const r = e.name; const a = e.type; const n = e.tagName.toLowerCase(); if (void 0 === t && (t = !0), t && (!r || e.disabled || a === 'reset' || a === 'button' || (a === 'checkbox' || a === 'radio') && !e.checked || (a === 'submit' || a === 'image') && e.form && e.form.clk !== e || n === 'select' && e.selectedIndex === -1)) return null; if (n !== 'select') return q(e).val().replace(m, '\r\n'); const o = e.selectedIndex; if (o < 0) return null; for (var i = [], s = e.options, u = a === 'select-one', c = u ? o + 1 : s.length, l = u ? o : 0; l < c; l++) { const f = s[l]; if (f.selected && !f.disabled) { var d = (d = f.value) || (f.attributes && f.attributes.value && !f.attributes.value.specified ? f.text : f.value); if (u) return d; i.push(d) } } return i }, q.fn.clearForm = function (e) { return this.each(function () { q('input,select,textarea', this).clearFields(e) }) }, q.fn.clearFields = q.fn.clearInputs = function (r) { const a = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function () { const e = this.type; const t = this.tagName.toLowerCase(); a.test(e) || t === 'textarea' ? this.value = '' : e === 'checkbox' || e === 'radio' ? this.checked = !1 : t === 'select' ? this.selectedIndex = -1 : e === 'file' ? /MSIE/.test(navigator.userAgent) ? q(this).replaceWith(q(this).clone(!0)) : q(this).val('') : r && (!0 === r && /hidden/.test(e) || typeof r === 'string' && q(this).is(r)) && (this.value = '') }) }, q.fn.resetForm = function () { return this.each(function () { const t = q(this); const e = this.tagName.toLowerCase(); switch (e) { case 'input':this.checked = this.defaultChecked; case 'textarea':return this.value = this.defaultValue, !0; case 'option':case 'optgroup':var r = t.parents('select'); return r.length && r[0].multiple ? e === 'option' ? this.selected = this.defaultSelected : t.find('option').resetForm() : r.resetForm(), !0; case 'select':return t.find('option').each(function (e) { if (this.selected = this.defaultSelected, this.defaultSelected && !t[0].multiple) return t[0].selectedIndex = e, !1 }), !0; case 'label':var a = q(t.attr('for')); var n = t.find('input,select,textarea'); return a[0] && n.unshift(a[0]), n.resetForm(), !0; case 'form':return typeof this.reset !== 'function' && (typeof this.reset !== 'object' || this.reset.nodeType) || this.reset(), !0; default:return t.find('form,input,label,select,textarea').resetForm(), !0 } }) }, q.fn.enable = function (e) { return void 0 === e && (e = !0), this.each(function () { this.disabled = !e }) }, q.fn.selected = function (r) { return void 0 === r && (r = !0), this.each(function () { let e; const t = this.type; t === 'checkbox' || t === 'radio' ? this.checked = r : this.tagName.toLowerCase() === 'option' && (e = q(this).parent('select'), r && e[0] && e[0].type === 'select-one' && e.find('option').selected(!1), this.selected = r) }) }, q.fn.ajaxSubmit.debug = !1 }))
// # sourceMappingURL=jquery.form.min.js.map
